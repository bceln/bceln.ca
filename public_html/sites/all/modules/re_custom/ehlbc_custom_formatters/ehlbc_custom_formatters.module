<?php


/**
 * Implements hook_field_group_format_settings().
 * If the group has no format settings, default ones will be added.
 * @params Object $group The group object.
 * @return Array $form The form element for the format settings.
 */
function ehlbc_custom_formatters_field_group_format_settings($group) {
  // Add a wrapper for extra settings to use by others.
  $form = array(
    'instance_settings' => array(
      '#tree' => TRUE,
      '#weight' => 2,
    ),
  );
  // Add optional instance_settings.
  switch ($group->format_type) {
    case 'f_row':
    case 'simple_div':
      $form['instance_settings']['label_element'] = array(
        '#title' => t('Label element'),
        '#type' => 'select',
        '#options' => array(
          'h2' => t('Heading 2'),
          'h3' => t('Heading 3'),
          'h4' => t('Heading 4'),
          'h5' => t('Heading 5'),
          'h6' => t('Heading 6'),
          'none' => t('None'),
        ),
        '#default_value' => isset($group->format_settings['instance_settings']['label_element']) ? $group->format_settings['instance_settings']['label_element'] : $formatter['instance_settings']['label_element'],
        '#weight' => 2,
      );
      break;
    default:
  }
  return $form;
} // ehlbc_custom_formatters_field_group_format_settings()


/**
 * hook_field_group_formatter_info().
 */
function ehlbc_custom_formatters_field_group_formatter_info(){
  $info['display'] = array(
    'f_row' => array(
      'description' => t('This fieldgroup renders the field labels and values as foundation rows'),
      'instance_settings' => array(
        'label_element' => 'h2',
      ),
      'label' => t('Foundation Row'),
    ),
    'simple_div' => array(
      'description' => t('This fieldgroup renders the enclosed fields in a simple div'),
      'instance_settings' => array(
        'label_element' => 'h2',
      ),
      'label' => t('Simple Div'),
    ),
  );
  $info['form'] = $info['display'];
  return $info;
} // ehlbc_custom_formatters_field_group_formatter_info()


/**
 * Implements hook_field_group_pre_render().
 * 
 * @param Array $elements by address.
 * @param Object $group The Field group info.
 */
function ehlbc_custom_formatters_field_group_pre_render(&$element, $group, &$form) {
  // Sanity check, check group has field elements:
  if (!is_array($element) || !count($element)) {
    return FALSE;
  }
  // Sort the grouped fields by #weight:
  uasort($element, 'element_sort');
  switch ($group->format_type) {
    // Foundation row:
    case 'f_row':
      // Build options:
      $columns = array();
      // Loop over group elements columns:
      foreach ($element as $field_name => $field) {
        $columns[] = array(
          'data' =>  render($field),
          'class' => array('field-value-' . drupal_html_class($field_name)),
        );
      }
      // Build element merge array:
      $field = array(
        '#markup' => theme('ehlbc_foundation_rows', array('columns' => $columns)),
        '#prefix' => '<div class="row field-group-f-row-' . drupal_html_class($group->group_name) . '">',
        '#suffix' => '</div>',
        '#type' => 'markup',
        '#weight' => $group->weight,
      );
      // Merge our row into the element:
      $element += $field;
      break;
    case 'simple_div':
      $fields = array();
      foreach ($element as $field_name => $field) {
        $fields[] = array(
          'data' => render($field),
          'class' => array('field-value-' . drupal_html_class($field_name)),
        );
      }
      $variables = array(
        'class' => array(
          'field-group-simple-div-' . drupal_html_class($group->group_name),
        ),
        'fields' => $fields,
        'heading' => array(
          'element' => $group->format_settings['instance_settings']['label_element'],
          'label' => $group->format_settings['label'],
        ),
      );
      $field = array(
        '#markup' => theme('ehlbc_simple_div', $variables),
        '#type' => 'markup',
        '#weight' => $group->weight,
      );
      $element += $field;
      break;
  }
}

/**
 * Implements hook_theme().
 */
function ehlbc_custom_formatters_theme() {
  return array(
    'ehlbc_foundation_rows' => array(
      'class' => NULL,
      'fields' => NULL,
      'heading' => array(
        'element' => NULL,
        'label' => NULL,
      ),
    ),
    'ehlbc_simple_div' => array(),
  );
} // ehlbc_custom_formatters_theme()


/**
 * 
 */
function theme_ehlbc_foundation_rows($variables) {
  $column_sizes = array(
    0 => 'one',
    1 => 'two',
    2 => 'three',
    3 => 'four',
    4 => 'five',
    5 => 'six',
    6 => 'seven',
    7 => 'eight',
    8 => 'nine',
    9 => 'ten',
    10 => 'eleven',
    11 => 'twelve',
  );
  $total_columns = count($variables['columns']);
  $column_size = floor(12 / $total_columns);
  foreach ($variables['columns'] as $key => $col) {
    $output .= '<div class="columns ' . $column_sizes[$column_size - 1] . '">' . $col['data'] . '</div>';
  }
  return $output; 
} // theme_ehlbc_foundation_rows()


/**
 *
 */
function theme_ehlbc_simple_div($variables) {
  $div_pattern = '<div class="%s">%s</div>';
  $heading_pattern = '<%s>%s</%s>';
  $row_pattern = '<div class="field">%s</div>';
  if ($variables['heading']['element'] !== 'none') {
    $content = sprintf(
      $heading_pattern,
      $variables['heading']['element'],
      $variables['heading']['label'], 
      $variables['heading']['element']
    ) . chr(10);
  }
  else {
    $content = '';
  }
  foreach ($variables['fields'] as $field) {
    $content .= sprintf($row_pattern, $field['data']) . chr(10);
  }
  return sprintf($div_pattern, implode(' ', $variables['class']), $content);
} // theme_ehlbc_simple_div()

